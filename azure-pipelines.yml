# AMLBatchScoringPipeline Pipeline 

trigger:
  batch: true
  branches:
    include:
    - master
    
variables:
- group: AzureKeyVault

stages:
- stage: Deploy
  jobs:
  - deployment: AMLBatchScoringPipelineJob
    timeoutInMinutes: 300
    cancelTimeoutInMinutes: 2
    pool:
      vmImage: 'Ubuntu-16.04'

    environment: 'dev'

    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              source /usr/share/miniconda/etc/profile.d/conda.sh
              which conda
              conda env create -f environment.yml
              conda env list
              conda activate amlmm
              conda env list  
              echo Login Azure Account
              az login -t $(sptenent) --service-principal -u $(spidentity) --password $(spsecret)
            displayName: 'Configuration'
          
          - bash: |
              source /usr/share/miniconda/etc/profile.d/conda.sh
              conda activate amlmm
              echo Execute 01_create_resources.ipynb
              papermill 01_create_resources.ipynb 01_create_resources_Output.ipynb --log-output --no-progress-bar -k python3 -p SUBSCRIPTION_NAME  $(subscriptionname) -p RESOURCE_GROUP $(azurergname) -p LOCATION $(azurelocation)
            displayName: '01_create_resources.ipynb'

          - bash: |
              source /usr/share/miniconda/etc/profile.d/conda.sh
              conda activate amlmm
              echo Execute 02_create_pipeline.ipynb
              papermill 02_create_pipeline.ipynb 02_create_pipeline_Output.ipynb --log-output --no-progress-bar -k python3 
            displayName: '02_create_pipeline.ipynb'

          - bash: |
              source /usr/share/miniconda/etc/profile.d/conda.sh
              conda activate amlmm
              echo Execute Resource Group Delete
              existResponse=$(az group exists -n $(azurergname))
              if [ "$existResponse" == "true" ]; then
                echo Deleting resource group $(azurergname) 
                az group delete --name $(azurergname) --yes
              else
                echo Resource group did not exist $(azurergname)
              fi
              echo Done Cleanup
            displayName: 'Cleanup'
            condition: always()

          - task: CreateWorkItem@1
            inputs:
              workItemType: 'Issue'
              title: $(System.TeamProject) - Build $(Build.BuildNumber) Failed
              assignedTo: 'Katherine Lin <katlin@microsoft.com>'
              associate: true
              teamProject: $(System.TeamProject)
            
              fieldMappings: |
                Description=Branch: Branch $(Build.SourceBranch) failed to build. Go to Boards>WorkItems and tag the failure type.
            displayName: 'Create work item on failure'
            condition: failed()    